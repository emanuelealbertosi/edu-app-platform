import React, { useState, useEffect } from 'react';
import { 
  Container, 
  Typography, 
  Box, 
  Paper, 
  Grid,
  Card,
  CardContent,
  CardActions,
  CardMedia,
  Button,
  TextField,
  Chip,
  IconButton,
  Divider,
  CircularProgress,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  SelectChangeEvent,
  Fab,
  InputAdornment,
  Tabs,
  Tab,
  Badge,
  Alert,
  Tooltip,
  List,
  ListItem,
  ListItemText,
  ListItemAvatar,
  Avatar,
  ListItemSecondaryAction
} from '@mui/material';
import { 
  Add as AddIcon, 
  Edit as EditIcon, 
  Delete as DeleteIcon,
  EmojiEvents as TrophyIcon,
  School as SchoolIcon,
  Stars as StarsIcon,
  CheckCircle as ApproveIcon,
  Cancel as RejectIcon,
  AssignmentTurnedIn as AssignIcon,
  Refresh as RefreshIcon
} from '@mui/icons-material';
import MainLayout from '../../components/layouts/MainLayout';
import PageTransition from '../../components/animations/PageTransition';
import FadeInLoader from '../../components/animations/FadeInLoader';
import AnimatedCard from '../../components/animations/AnimatedCard';
import HoverAnimation from '../../components/animations/HoverAnimation';
import { ApiErrorHandler } from '../../services/ApiErrorHandler';
import { NotificationsService } from '../../services/NotificationsService';
import RewardService, { RewardTemplate, StudentRewardStats, PendingReward } from '../../services/RewardService';
import StudentService, { Student } from '../../services/StudentService';
import { motion, AnimatePresence } from 'framer-motion';
import { useAuth } from '../../contexts/AuthContext';

// Interfaccia per il form di creazione/modifica di un template di premio
interface RewardForm {
  title: string;
  description: string;
  category: 'digitale' | 'fisico' | 'privilegio';
  pointsCost: number;
  imageUrl?: string;
  availability: 'illimitato' | 'limitato';
  quantity?: number;
  expiryDate?: Date | null;
}

// Componente per visualizzare i riscatti recenti
function RecentRedemptions({ selectedStudent, studentStats }: {
  selectedStudent: Student | null;
  studentStats: Map<string, StudentRewardStats>;
}) {
  if (!selectedStudent) return null;
  
  const stats = studentStats.get(selectedStudent.id);
  if (!stats || !stats.recentRedemptions || stats.recentRedemptions.length === 0) {
    return null;
  }
  
  return (
    <Paper variant="outlined" sx={{ p: 2 }}>
      <Typography variant="subtitle2" gutterBottom>Riscatti recenti:</Typography>
      {stats.recentRedemptions.map((redemption, index) => (
        <Box key={index} sx={{ mb: 1 }}>
          <Typography variant="body2">
            <strong>{redemption.rewardTitle}</strong> - {redemption.date}
          </Typography>
          {index < (stats.recentRedemptions?.length || 0) - 1 && <Divider sx={{ my: 1 }} />}
        </Box>
      ))}
    </Paper>
  );
};

// Interfaccia per le statistiche di uno studente
interface StudentRewardData {
  studentId: string;
  name: string;
  totalPoints: number;
  availablePoints: number;
  redeemedRewards: number;
}

function ManageRewards() {
  const { user } = useAuth();
  const [rewardTemplates, setRewardTemplates] = useState<RewardTemplate[]>([]);
  const [students, setStudents] = useState<Student[]>([]);
  const [studentStats, setStudentStats] = useState<Map<string, StudentRewardStats>>(new Map());
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [rewardToDelete, setRewardToDelete] = useState<RewardTemplate | null>(null);
  const [createDialogOpen, setCreateDialogOpen] = useState(false);
  
  // Stati per le tab e le richieste in sospeso
  const [tabValue, setTabValue] = useState<number>(0);
  // Utilizziamo un tipo esteso di PendingReward per la UI
  interface ExtendedPendingReward extends PendingReward {
    category?: string;
    description?: string;
  }
  const [pendingRewards, setPendingRewards] = useState<ExtendedPendingReward[]>([]);
  const [pendingLoading, setPendingLoading] = useState<boolean>(false);
  
  // Stato per le ricompense assegnate
  type RewardStatus = 'new' | 'pending' | 'redeemed' | 'accepted' | 'rejected';
  interface AssignedReward extends Reward {
    studentName?: string;
    statusLabel?: string;
  }
  const [assignedRewards, setAssignedRewards] = useState<AssignedReward[]>([]);
  const [assignedLoading, setAssignedLoading] = useState<boolean>(false);
  
  // Stati per l'assegnazione dei premi
  const [assignDialogOpen, setAssignDialogOpen] = useState<boolean>(false);
  const [selectedTemplate, setSelectedTemplate] = useState<RewardTemplate | null>(null);
  const [selectedStudentId, setSelectedStudentId] = useState<string>('');
  const [studentStatsDialogOpen, setStudentStatsDialogOpen] = useState(false);
  const [selectedStudent, setSelectedStudent] = useState<Student | null>(null);
  const [categoryFilter, setCategoryFilter] = useState<string>('');
  const [isEditMode, setIsEditMode] = useState(false);
  const [editingRewardId, setEditingRewardId] = useState<string | null>(null);
  
  // I duplicati sono stati rimossi, questi stati sono già dichiarati sopra
  
  // Form per nuovo reward template
  const [newReward, setNewReward] = useState<RewardForm>({
    title: '',
    description: '',
    category: 'digitale',
    pointsCost: 100,
    imageUrl: '',
    availability: 'illimitato'
  });

  useEffect(() => {
    fetchRewardTemplates();
    fetchStudents();
    
    // Carichiamo i dati in base alla tab attiva
    switch(tabValue) {
      case 0: // Template
        break;
      case 1: // Statistiche studenti
        // Già caricato in fetchStudents()
        break;
      case 2: // Richieste in sospeso
        fetchPendingRewards();
        break;
      case 3: // Reward Assegnate
        fetchAssignedRewards();
        break;
    }
  }, [tabValue]);
  
  // Funzione per recuperare le richieste di premio in attesa di approvazione
  const fetchPendingRewards = async () => {
    setPendingLoading(true);
    try {
      const rewards = await RewardService.getPendingRewards();
      // Aggiungiamo al tipo PendingReward le proprietà aggiuntive necessarie per la visualizzazione
      // senza modificare l'originale
      setPendingRewards(rewards.map(reward => ({
        ...reward,
        // Aggiungiamo proprietà per la visualizzazione nella UI
        category: 'digitale',
        description: '' // Placeholder vuoto per compatibilità con l'interfaccia UI
      })));
      setPendingLoading(false);
    } catch (error) {
      ApiErrorHandler.handleApiError(error);
      setPendingLoading(false);
    }
  };
  
  // Funzione per recuperare le ricompense assegnate 
  const fetchAssignedRewards = async () => {
    setAssignedLoading(true);
    try {
      let allAssignedRewards: AssignedReward[] = [];
      
      // Per ogni studente, recuperiamo le reward assegnate
      await Promise.all(
        students.map(async (student) => {
          try {
            // Utilizziamo un metodo esistente del service per recuperare le reward non riscattate
            const studentRewards = await RewardService.getUnredeemedRewards(student.id);
            
            // Formattiamo i dati per la visualizzazione
            const formattedRewards = studentRewards.map(reward => ({
              ...reward,
              studentName: student.name,
              statusLabel: getStatusLabel(reward.status)
            }));
            
            allAssignedRewards = [...allAssignedRewards, ...formattedRewards];
          } catch (error) {
            console.error(`Errore nel caricamento delle ricompense per lo studente ${student.id}`, error);
          }
        })
      );
      
      setAssignedRewards(allAssignedRewards);
      setAssignedLoading(false);
    } catch (error) {
      ApiErrorHandler.handleApiError(error);
      setAssignedLoading(false);
    }
  };
  
  // Funzione per convertire lo stato in un'etichetta leggibile
  const getStatusLabel = (status: string): string => {
    switch(status) {
      case 'disponibile':
        return 'Nuovo';
      case 'riscattato':
        return 'Riscattato';
      case 'consegnato':
        return 'Accettato';
      case 'scaduto':
        return 'Rifiutato';
      default:
        return 'In attesa';
    }
  };
  
  // Funzione per ottenere le statistiche di uno studente specifico
  const fetchStudentStats = async (studentId: string) => {
    try {
      const stats = await RewardService.getStudentRewardStats(studentId);
      setStudentStats(prev => {
        const newMap = new Map(prev);
        newMap.set(studentId, stats);
        return newMap;
      });
    } catch (error) {
      console.error(`Errore nel caricamento delle statistiche per lo studente ${studentId}`, error);
      ApiErrorHandler.handleApiError(error);
    }
  };

  const fetchRewardTemplates = async () => {
    setLoading(true);
    try {
      const templates = await RewardService.getAllRewardTemplates();
      setRewardTemplates(templates);
      setLoading(false);
    } catch (error) {
      ApiErrorHandler.handleApiError(error);
      setLoading(false);
    }
  };

  const handleEditClick = (template: RewardTemplate) => {
    // Imposta i dati del template selezionato nel form di modifica
    setNewReward({
      title: template.title,
      description: template.description,
      category: template.category as 'digitale' | 'fisico' | 'privilegio',
      pointsCost: template.pointsCost,
      imageUrl: template.imageUrl || '',
      availability: template.quantity ? 'limitato' : 'illimitato',
      quantity: template.quantity || undefined,
      expiryDate: template.expiryDate ? new Date(template.expiryDate) : null
    });
    
    // Imposta la modalità di modifica
    setIsEditMode(true);
    setEditingRewardId(template.id);
    
    // Apre il dialog
    setCreateDialogOpen(true);
  };

  const fetchStudents = async () => {
    try {
      const studentsData = await StudentService.getStudentsByParent();
      setStudents(studentsData);
      
      // Per ogni studente, carichiamo anche le statistiche relative ai premi
      const statsMap = new Map<string, StudentRewardStats>();
      
      await Promise.all(
        studentsData.map(async (student) => {
          try {
            const stats = await RewardService.getStudentRewardStats(student.id);
            statsMap.set(student.id, stats);
          } catch (error) {
            console.error(`Errore nel caricamento delle statistiche per lo studente ${student.id}`, error);
          }
        })
      );
      
      setStudentStats(statsMap);
    } catch (error) {
      ApiErrorHandler.handleApiError(error);
    }
  };

  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(event.target.value);
  };

  const handleCategoryFilterChange = (event: SelectChangeEvent) => {
    setCategoryFilter(event.target.value);
  };

  const handleDeleteClick = (template: RewardTemplate) => {
    setRewardToDelete(template);
    setDeleteDialogOpen(true);
  };

  const handleDeleteConfirm = async () => {
    if (!rewardToDelete) return;
    
    try {
      await RewardService.deleteRewardTemplate(rewardToDelete.id);
      
      // Aggiorna la lista dei template di premi rimuovendo quello cancellato
      setRewardTemplates(rewardTemplates.filter(template => template.id !== rewardToDelete.id));
      // La notifica viene già mostrata dal service
    } catch (error) {
      ApiErrorHandler.handleApiError(error);
    } finally {
      setDeleteDialogOpen(false);
      setRewardToDelete(null);
    }
  };

  const handleDeleteCancel = () => {
    setDeleteDialogOpen(false);
    setRewardToDelete(null);
  };

  const handleCreateDialogOpen = () => {
    setIsEditMode(false);
    setCreateDialogOpen(true);
  };

  const handleCreateDialogClose = () => {
    setCreateDialogOpen(false);
    setIsEditMode(false);
    setEditingRewardId(null);
    // Reset form
    setNewReward({
      title: '',
      description: '',
      category: 'digitale',
      pointsCost: 100,
      imageUrl: '',
      availability: 'illimitato'
    });
  };

  const handleNewRewardChange = (field: string, value: string | number | Date | null) => {
    setNewReward(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleCreateOrUpdateReward = async () => {
    try {
      // Validazione
      if (!newReward.title.trim() || !newReward.description.trim() || newReward.pointsCost <= 0) {
        NotificationsService.error('Compila tutti i campi obbligatori');
        return;
      }

      // Creazione del template completo per l'API
      const templateData = {
        ...newReward,
        createdBy: user?.id || '',
        // Assicuriamoci che expiryDate sia undefined se è null
        expiryDate: newReward.expiryDate || undefined
      };
      
      if (isEditMode && editingRewardId) {
        // Aggiornamento di un template esistente
        const updatedTemplate = await RewardService.updateRewardTemplate(editingRewardId, templateData);
        
        // Aggiorna la lista dei template sostituendo quello modificato
        const updatedTemplates = rewardTemplates.map(template => 
          template.id === editingRewardId ? updatedTemplate : template
        );
        setRewardTemplates(updatedTemplates);
        
        NotificationsService.success('Premio aggiornato con successo');
      } else {
        // Chiamata al servizio per creare il nuovo template
        const createdTemplate = await RewardService.createRewardTemplate(templateData);
        
        // Aggiorna la lista dei template con il nuovo template
        setRewardTemplates([...rewardTemplates, createdTemplate]);
        
        NotificationsService.success('Nuovo premio creato con successo');
      }
      
      // Chiudi il dialog
      handleCreateDialogClose();
    } catch (error) {
      ApiErrorHandler.handleApiError(error);
    }
  };

  const handleStudentStatsClick = (student: Student) => {
    setSelectedStudent(student);
    setStudentStatsDialogOpen(true);
  };

  const handleStudentStatsClose = () => {
    setStudentStatsDialogOpen(false);
    setSelectedStudent(null);
  };
  
  // Funzione per aprire il dialog di assegnazione premio
  const handleAssignClick = (template: RewardTemplate) => {
    setSelectedTemplate(template);
    setSelectedStudentId(students.length > 0 ? students[0].id : '');
    setAssignDialogOpen(true);
  };
  
  // Funzione per chiudere il dialog di assegnazione premio
  const handleAssignDialogClose = () => {
    setAssignDialogOpen(false);
    setSelectedTemplate(null);
    setSelectedStudentId('');
  };
  
  // Funzione per assegnare un premio a uno studente
  const handleAssignReward = async () => {
    if (!selectedTemplate || !selectedStudentId) {
      NotificationsService.error('Seleziona un template e uno studente validi');
      return;
    }
    
    try {
      await RewardService.assignRewardToStudent(selectedTemplate.id, selectedStudentId);
      
      // Aggiorniamo le statistiche dello studente
      fetchStudentStats(selectedStudentId);
      
      handleAssignDialogClose();
    } catch (error) {
      ApiErrorHandler.handleApiError(error);
    }
  };
  
  // Funzione per approvare un premio in attesa
  const handleApproveReward = async (rewardId: string) => {
    try {
      await RewardService.approveReward(rewardId);
      // Aggiorniamo la lista rimuovendo il premio approvato
      setPendingRewards(pendingRewards.filter(reward => reward.id !== rewardId));
      NotificationsService.success('Premio approvato con successo', 'Approvato');
      // Aggiorniamo anche le statistiche degli studenti
      fetchStudents();
    } catch (error) {
      ApiErrorHandler.handleApiError(error);
    }
  };
  
  // Funzione per rifiutare un premio in attesa
  const handleRejectReward = async (rewardId: string) => {
    try {
      await RewardService.rejectReward(rewardId);
      // Aggiorniamo la lista rimuovendo il premio rifiutato
      setPendingRewards(pendingRewards.filter(reward => reward.id !== rewardId));
      NotificationsService.success('Premio rifiutato con successo', 'Rifiutato');
      // Aggiorniamo anche le statistiche degli studenti
      fetchStudents();
    } catch (error) {
      ApiErrorHandler.handleApiError(error);
    }
  };
  
  // Gestione del cambio di tab
  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
    // Carichiamo i dati in base alla nuova tab attiva
    switch(newValue) {
      case 0: // Template
        fetchRewardTemplates();
        break;
      case 1: // Statistiche studenti
        fetchStudents();
        break;
      case 2: // Richieste in sospeso
        fetchPendingRewards();
        break;
      case 3: // Reward Assegnate
        fetchAssignedRewards();
        break;
    }
  };
  
  // Funzioni per la gestione delle ricompense assegnate
  const handleAcceptReward = async (rewardId: string) => {
    try {
      await RewardService.updateRewardStatus(rewardId, 'consegnato');
      NotificationsService.success('Ricompensa accettata con successo', 'Accettata');
      fetchAssignedRewards(); // Aggiorniamo la lista
    } catch (error) {
      ApiErrorHandler.handleApiError(error);
    }
  };
  
  const handleRejectReward = async (rewardId: string) => {
    try {
      await RewardService.updateRewardStatus(rewardId, 'scaduto');
      NotificationsService.success('Ricompensa rifiutata con successo', 'Rifiutata');
      fetchAssignedRewards(); // Aggiorniamo la lista
    } catch (error) {
      ApiErrorHandler.handleApiError(error);
    }
  };

  const filteredRewardTemplates = rewardTemplates.filter(template => {
    const searchLower = searchQuery.toLowerCase();
    const matchesSearch = 
      template.title.toLowerCase().includes(searchLower) ||
      template.description.toLowerCase().includes(searchLower);
    
    const matchesCategory = categoryFilter ? template.category === categoryFilter : true;

    return matchesSearch && matchesCategory;
  });
  
  // Helper per ottenere le statistiche di uno studente
  const getStudentStats = (studentId: string): StudentRewardData => {
    const stats = studentStats.get(studentId);
    const student = students.find(s => s.id === studentId);
    
    if (!stats || !student) {
      return {
        studentId,
        name: student ? `${student.name}` : 'Studente',
        totalPoints: 0,
        availablePoints: 0,
        redeemedRewards: 0
      };
    }
    
    return {
      studentId,
      name: student.name,
      totalPoints: stats.totalPointsEarned,
      availablePoints: stats.availablePoints,
      redeemedRewards: stats.redeemedRewards
    };
  };

  const getCategoryChip = (category: string) => {
    switch (category) {
      case 'digitale':
        return <Chip icon={<StarsIcon />} label="Digitale" color="info" size="small" />;
      case 'fisico':
        return <Chip icon={<SchoolIcon />} label="Fisico" color="success" size="small" />;
      case 'privilegio':
        return <Chip icon={<TrophyIcon />} label="Privilegio" color="warning" size="small" />;
      default:
        return <Chip label={category} size="small" />;
    }
  };

  // Utilizziamo l'utility nel categoryUtils.tsx per gestire uniformemente le categorie

  return (
    <MainLayout>
      <PageTransition>
      <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
        <Box sx={{ mb: 4 }}>
          <Typography variant="h4" component="h1" gutterBottom>
            Gestione Premi
          </Typography>
          <Typography variant="body1" color="textSecondary" gutterBottom>
            Crea e gestisci i premi che gli studenti possono ottenere accumulando punti completando attività didattiche.
          </Typography>
        </Box>

        <Box sx={{ width: '100%', mb: 3 }}>
          <Paper sx={{ p: 0 }}>
            <Tabs
              value={tabValue}
              onChange={handleTabChange}
              indicatorColor="primary"
              textColor="primary"
              variant="scrollable"
              scrollButtons="auto"
              aria-label="gestione premi tabs"
            >
              <Tab 
                label="Template" 
                icon={<StarsIcon />} 
                iconPosition="start" 
              />
              <Tab 
                label="Statistiche Studenti" 
                icon={<SchoolIcon />} 
                iconPosition="start" 
              />
              <Tab 
                label={
                  <Badge badgeContent={pendingRewards.length} color="error" max={99}>
                    Richieste in sospeso
                  </Badge>
                } 
                icon={<ApproveIcon />} 
                iconPosition="start" 
              />
              <Tab 
                label="Reward Assegnate" 
                icon={<AssignIcon />} 
                iconPosition="start" 
              />
            </Tabs>
          </Paper>
        </Box>
        
        <Grid container spacing={3}>
          {tabValue === 0 && (
            <>
              <Grid item xs={12} md={8}>
                <Paper sx={{ p: 2, mb: 3 }}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
                    <Typography variant="h5" component="h2">
                      Template premi
                    </Typography>
                    <HoverAnimation>
                      <Button 
                        variant="contained" 
                        startIcon={<AddIcon />}
                        color="primary"
                        onClick={handleCreateDialogOpen}
                      >
                        Nuovo Premio
                      </Button>
                    </HoverAnimation>
                  </Box>

              <Box sx={{ display: 'flex', gap: 2, mb: 3 }}>
                <TextField
                  label="Cerca premi"
                  variant="outlined"
                  size="small"
                  fullWidth
                  value={searchQuery}
                  onChange={handleSearchChange}
                  placeholder="Cerca per titolo o descrizione..."
                />
                <FormControl sx={{ minWidth: 150 }} size="small">
                  <InputLabel>Categoria</InputLabel>
                  <Select
                    value={categoryFilter}
                    label="Categoria"
                    onChange={handleCategoryFilterChange}
                  >
                    <MenuItem value="">Tutte</MenuItem>
                    <MenuItem value="digitale">Digitale</MenuItem>
                    <MenuItem value="fisico">Fisico</MenuItem>
                    <MenuItem value="privilegio">Privilegio</MenuItem>
                  </Select>
                </FormControl>
              </Box>
              
              {loading ? (
                <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
                  <CircularProgress />
                </Box>
              ) : (
                <AnimatePresence>
                  <Grid container spacing={2}>
                    {filteredRewardTemplates.length > 0 ? (
                      filteredRewardTemplates.map((template) => (
                        <Grid item xs={12} sm={6} md={4} key={template.id}>
                          <motion.div
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            exit={{ opacity: 0, scale: 0.9 }}
                            transition={{ duration: 0.3 }}
                          >
                            <AnimatedCard sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
                                {template.imageUrl && (
                                  <CardMedia
                                    component="img"
                                    height="140"
                                    image={template.imageUrl}
                                    alt={template.title}
                                  />
                                )}
                                <CardContent sx={{ flexGrow: 1 }}>
                                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 1 }}>
                                    <Typography variant="h6" component="h2" gutterBottom>
                                      {template.title}
                                    </Typography>
                                    {getCategoryChip(template.category)}
                                  </Box>
                                  <Typography color="textSecondary" variant="body2" gutterBottom>
                                    {template.description}
                                  </Typography>
                                  <Box sx={{ display: 'flex', alignItems: 'center', mt: 2 }}>
                                    <StarsIcon sx={{ color: 'warning.main', mr: 0.5 }} />
                                    <Typography variant="h6" color="warning.main">
                                      {template.pointsCost} punti
                                    </Typography>
                                  </Box>
                                  <Typography variant="body2" color="textSecondary" sx={{ mt: 1 }}>
                                    Disponibilità: {template.availability === 'illimitato' ? 'Illimitata' : `${template.quantity || 0} rimasti`}
                                  </Typography>
                                </CardContent>
                                <Divider />
                                <CardActions sx={{ justifyContent: 'space-between' }}>
                                  <Box>
                                    <Button 
                                      size="small"
                                      startIcon={<EditIcon />}
                                      onClick={() => handleEditClick(template)}
                                      sx={{ mr: 1 }}
                                    >
                                      Modifica
                                    </Button>
                                    <Button
                                      size="small"
                                      startIcon={<AssignIcon />}
                                      color="success"
                                      onClick={() => handleAssignClick(template)}
                                    >
                                      Assegna
                                    </Button>
                                  </Box>
                                  <IconButton 
                                    aria-label="elimina" 
                                    color="error"
                                    size="small"
                                    onClick={() => handleDeleteClick(template)}
                                  >
                                    <DeleteIcon />
                                  </IconButton>
                                </CardActions>
                            </AnimatedCard>
                          </motion.div>
                        </Grid>
                      ))
                    ) : (
                      <Grid item xs={12}>
                        <Box sx={{ textAlign: 'center', py: 4 }}>
                          <Typography variant="h6" color="textSecondary">
                            Nessun premio trovato
                          </Typography>
                          <Typography variant="body2" color="textSecondary">
                            Prova a modificare i criteri di ricerca o crea un nuovo premio
                          </Typography>
                        </Box>
                      </Grid>
                    )}
                  </Grid>
                </AnimatePresence>
              )}
            </Paper>
          </Grid>

          <Grid item xs={12} md={4}>
            <Paper sx={{ p: 2, mb: 3 }}>
              <Typography variant="h5" component="h2" gutterBottom>
                Statistiche Studenti
              </Typography>
              <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                Monitora i punti accumulati e i premi riscattati dai tuoi studenti.
              </Typography>

              {students.length > 0 ? (
                <Box>
                  {students.map((student) => {
                    const studentData = getStudentStats(student.id);
                    return (
                      <HoverAnimation key={student.id}>
                        <Card sx={{ mb: 2 }}>
                          <CardContent>
                            <Typography variant="h6" component="h3">
                              {student.name}
                            </Typography>
                            <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>
                              <StarsIcon sx={{ color: 'warning.main', mr: 0.5, fontSize: 20 }} />
                              <Typography variant="body1">
                                {studentData.availablePoints} / {studentData.totalPoints} punti
                              </Typography>
                            </Box>
                            <Typography variant="body2" color="textSecondary">
                              {studentData.redeemedRewards} premi riscattati
                            </Typography>
                          </CardContent>
                          <CardActions>
                            <Button 
                              size="small" 
                              onClick={() => handleStudentStatsClick(student)}
                            >
                              Dettagli
                            </Button>
                          </CardActions>
                        </Card>
                      </HoverAnimation>
                    );
                  })}
                </Box>
              ) : (
                <Box sx={{ textAlign: 'center', py: 4 }}>
                  <Typography variant="body1" color="textSecondary">
                    Nessuno studente trovato
                  </Typography>
                </Box>
              )}
                </Paper>
              </Grid>
x={{ display: 'flex', alignItems: 'center', mt: 1 }}>
                                  <StarsIcon sx={{ color: 'warning.main', mr: 0.5, fontSize: 20 }} />
                                  <Typography variant="body1">
                                    {studentData.availablePoints} / {studentData.totalPoints} punti
                                  </Typography>
                                </Box>
                                <Typography variant="body2" color="textSecondary">
                                  {studentData.redeemedRewards} premi riscattati
                                </Typography>
                              </CardContent>
                              <CardActions>
                                <Button 
                                  size="small" 
                                  onClick={() => handleStudentStatsClick(student)}
                                >
                                  Dettagli
                                </Button>
                              </CardActions>
                            </Card>
                          </HoverAnimation>
                        </Grid>
                      );
                    })}
                  </Grid>
                ) : (
                  <Box sx={{ textAlign: 'center', py: 4 }}>
                    <Typography variant="body1" color="textSecondary">
                      Nessuno studente trovato
                    </Typography>
                  </Box>
                )}
              </Paper>
            </Grid>
          )}
          
          {/* Tab Richieste in sospeso */}
          {tabValue === 2 && (
            <Grid item xs={12}>
              <Paper sx={{ p: 2, mb: 3 }}>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
                  <Typography variant="h5" component="h2">
                    Richieste in sospeso
                  </Typography>
                  <Button 
                    variant="outlined"
                    color="primary"
                    onClick={fetchPendingRewards}
                    startIcon={<RefreshIcon />}
                  >
                    Aggiorna
                  </Button>
                </Box>
                
                {pendingLoading ? (
                  <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
                    <CircularProgress />
                  </Box>
                ) : (
                  <>
                    {pendingRewards.length > 0 ? (
                      <List>
                        {pendingRewards.map((reward) => (
                          <Paper key={reward.id} elevation={1} sx={{ mb: 2 }}>
                            <ListItem>
                              <ListItemAvatar>
                                <Avatar sx={{ bgcolor: 'warning.main' }}>
                                  <StarsIcon />
                                </Avatar>
                              </ListItemAvatar>
                              <ListItemText
                                primary={
                                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                    <Typography variant="subtitle1">{reward.title}</Typography>
                                    {getCategoryChip('digitale')}
                                  </Box>
                                }
                                secondary={
                                  <>
                                    <Typography variant="body2" component="span">
                                      Richiesto da: <strong>{reward.studentName}</strong> - {reward.cost} punti
                                    </Typography>
                                    <Typography variant="caption" color="textSecondary">
                                      Richiesto il: {reward.requestDate}
                                    </Typography>
                                  </>
                                }
                              />
                              <ListItemSecondaryAction>
                                <Tooltip title="Approva richiesta">
                                  <IconButton 
                                    edge="end" 
                                    color="success" 
                                    onClick={() => handleApproveReward(reward.id)}
                                    sx={{ mr: 1 }}
                                  >
                                    <ApproveIcon />
                                  </IconButton>
                                </Tooltip>
                                <Tooltip title="Rifiuta richiesta">
                                  <IconButton 
                                    edge="end" 
                                    color="error"
                                    onClick={() => handleRejectReward(reward.id)}
                                  >
                                    <RejectIcon />
                                  </IconButton>
                                </Tooltip>
                              </ListItemSecondaryAction>
                            </ListItem>
                          </Paper>
                        ))}
                      </List>
                    ) : (
                      <Box sx={{ textAlign: 'center', py: 4 }}>
                        <Typography variant="h6" color="textSecondary">
                          Nessuna richiesta in sospeso
                        </Typography>
                        <Typography variant="body2" color="textSecondary">
                          Al momento non ci sono richieste di riscatto da approvare
                        </Typography>
                      </Box>
                    )}
                  </>
                )}
              </Paper>
            </Grid>
          )}
        </Grid>

        {/* FAB per aggiungere velocemente un nuovo premio */}
        <Fab 
          color="primary" 
          aria-label="add"
          sx={{
            position: 'fixed',
            bottom: 16,
            right: 16,
          }}
          onClick={handleCreateDialogOpen}
        >
          <AddIcon />
        </Fab>

        {/* Dialog per assegnare un premio a uno studente */}
        <Dialog
          open={assignDialogOpen}
          onClose={handleAssignDialogClose}
          maxWidth="sm"
          fullWidth
        >
          <DialogTitle>Assegna Premio</DialogTitle>
          <DialogContent>
            {selectedTemplate && (
              <Box sx={{ mt: 2 }}>
                <Typography variant="subtitle1" gutterBottom>
                  Stai per assegnare il premio: <strong>{selectedTemplate.title}</strong>
                </Typography>
                <Typography variant="body2" color="textSecondary" gutterBottom>
                  {selectedTemplate.description}
                </Typography>
                <Box sx={{ display: 'flex', alignItems: 'center', my: 2 }}>
                  <StarsIcon sx={{ color: 'warning.main', mr: 0.5 }} />
                  <Typography variant="subtitle2" color="warning.main">
                    {selectedTemplate.pointsCost} punti
                  </Typography>
                </Box>
                <FormControl fullWidth margin="normal">
                  <InputLabel>Studente</InputLabel>
                  <Select
                    value={selectedStudentId}
                    label="Studente"
                    onChange={(e) => setSelectedStudentId(e.target.value)}
                  >
                    {students.map(student => (
                      <MenuItem key={student.id} value={student.id}>
                        {student.name}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Box>
            )}
          </DialogContent>
          <DialogActions>
            <Button onClick={handleAssignDialogClose}>Annulla</Button>
            <Button 
              onClick={handleAssignReward} 
              color="primary" 
              variant="contained"
              disabled={!selectedTemplate || !selectedStudentId}
            >
              Assegna
            </Button>
          </DialogActions>
        </Dialog>
        
        {/* Dialog di creazione nuovo premio */}
        <Dialog
          open={createDialogOpen}
          onClose={handleCreateDialogClose}
          maxWidth="sm"
          fullWidth
        >
          <DialogTitle>{isEditMode ? 'Modifica Premio' : 'Crea Nuovo Premio'}</DialogTitle>
          <DialogContent>
            <Box sx={{ mt: 1 }}>
              <TextField
                label="Titolo"
                variant="outlined"
                fullWidth
                margin="normal"
                value={newReward.title}
                onChange={(e) => handleNewRewardChange('title', e.target.value)}
                required
              />
              <TextField
                label="Descrizione"
                variant="outlined"
                fullWidth
                margin="normal"
                multiline
                rows={3}
                value={newReward.description}
                onChange={(e) => handleNewRewardChange('description', e.target.value)}
                required
              />
              <FormControl fullWidth margin="normal">
                <InputLabel>Categoria</InputLabel>
                <Select
                  value={newReward.category}
                  label="Categoria"
                  onChange={(e) => handleNewRewardChange('category', e.target.value)}
                >
                  <MenuItem value="digitale">Digitale</MenuItem>
                  <MenuItem value="fisico">Fisico</MenuItem>
                  <MenuItem value="privilegio">Privilegio</MenuItem>
                </Select>
              </FormControl>
              <TextField
                label="Punti necessari"
                variant="outlined"
                fullWidth
                margin="normal"
                type="number"
                InputProps={{ 
                  endAdornment: <InputAdornment position="end">punti</InputAdornment>
                }}
                value={newReward.pointsCost}
                onChange={(e) => handleNewRewardChange('pointsCost', parseInt(e.target.value) || 0)}
                required
              />
              <FormControl fullWidth margin="normal">
                <InputLabel>Disponibilità</InputLabel>
                <Select
                  value={newReward.availability}
                  label="Disponibilità"
                  onChange={(e) => handleNewRewardChange('availability', e.target.value)}
                >
                  <MenuItem value="illimitato">Illimitata</MenuItem>
                  <MenuItem value="limitato">Limitata</MenuItem>
                </Select>
              </FormControl>
              {newReward.availability === 'limitato' && (
                <TextField
                  label="Quantità disponibile"
                  variant="outlined"
                  fullWidth
                  margin="normal"
                  type="number"
                  value={newReward.quantity || 1}
                  onChange={(e) => handleNewRewardChange('quantity', parseInt(e.target.value) || 1)}
                />
              )}
              <TextField
                label="URL Immagine (opzionale)"
                variant="outlined"
                fullWidth
                margin="normal"
                value={newReward.imageUrl || ''}
                onChange={(e) => handleNewRewardChange('imageUrl', e.target.value)}
                placeholder="https://esempio.com/immagine.jpg"
              />
            </Box>
          </DialogContent>
          <DialogActions>
            <Button onClick={handleCreateDialogClose}>
              Annulla
            </Button>
            <Button 
              onClick={handleCreateOrUpdateReward} 
              color="primary" 
              variant="contained"
            >
              {isEditMode ? 'Aggiorna Premio' : 'Crea Premio'}
            </Button>
          </DialogActions>
        </Dialog>

        {/* Dialog per i dettagli dello studente */}
        <Dialog
          open={studentStatsDialogOpen}
          onClose={handleStudentStatsClose}
          maxWidth="sm"
          fullWidth
        >
          {selectedStudent && (
            <>
              <DialogTitle>
                Dettagli di {selectedStudent.name}
              </DialogTitle>
              <DialogContent>
                {studentStats.has(selectedStudent.id) ? (
                  <>
                    <Box sx={{ mb: 3 }}>
                      <Typography variant="h6" gutterBottom>
                        Riepilogo Punti
                      </Typography>
                      <Grid container spacing={2}>
                        <Grid item xs={6}>
                          <Paper sx={{ p: 2, textAlign: 'center', bgcolor: 'primary.light', color: 'white' }}>
                            <Typography variant="body2">Punti Totali Guadagnati</Typography>
                            <Typography variant="h4">{studentStats.get(selectedStudent.id)?.totalPointsEarned || 0}</Typography>
                          </Paper>
                        </Grid>
                        <Grid item xs={6}>
                          <Paper sx={{ p: 2, textAlign: 'center', bgcolor: 'success.light', color: 'white' }}>
                            <Typography variant="body2">Punti Disponibili</Typography>
                            <Typography variant="h4">{studentStats.get(selectedStudent.id)?.availablePoints || 0}</Typography>
                          </Paper>
                        </Grid>
                      </Grid>
                    </Box>
                    
                    <Typography variant="h6" gutterBottom>
                      Premi Riscattati
                    </Typography>
                    {(studentStats.get(selectedStudent.id)?.redeemedRewards || 0) > 0 ? (
                      <>
                        <Typography variant="body1" sx={{ mb: 2 }}>
                          Lo studente ha riscattato {studentStats.get(selectedStudent.id)?.redeemedRewards || 0} premi.
                        </Typography>
                        <RecentRedemptions 
                          selectedStudent={selectedStudent} 
                          studentStats={studentStats} 
                        />
                      </>
                    ) : (
                      <Typography variant="body1" color="textSecondary">
                        Nessun premio riscattato finora.
                      </Typography>
                    )}
                  </>
                ) : (
                  <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
                    <FadeInLoader message="Caricamento statistiche studente..." />
                  </Box>
                )}
              </DialogContent>
              <DialogActions>
                <Button onClick={handleStudentStatsClose} color="primary">
                  Chiudi
                </Button>
              </DialogActions>
            </>
          )}
        </Dialog>

        {/* Dialog di conferma eliminazione */}
        <Dialog
          open={deleteDialogOpen}
          onClose={handleDeleteCancel}
        >
          <DialogTitle>Conferma eliminazione</DialogTitle>
          <DialogContent>
            <Typography>
              Sei sicuro di voler eliminare il premio "{rewardToDelete?.title}"?
              Questa azione non può essere annullata.
            </Typography>
          </DialogContent>
          <DialogActions>
            <Button onClick={handleDeleteCancel} color="primary">
              Annulla
            </Button>
            <Button onClick={handleDeleteConfirm} color="error" autoFocus>
              Elimina
            </Button>
          </DialogActions>
        </Dialog>
      </Container>
      </PageTransition>
    </MainLayout>
  );
};

export default ManageRewards;
